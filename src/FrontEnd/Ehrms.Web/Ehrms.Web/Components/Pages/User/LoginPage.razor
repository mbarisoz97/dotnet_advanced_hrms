@layout EmptyLayout
@attribute [Route(UserRouting.Login)]

@inject ICookieService CookieService
@inject ITokenHandler TokenHandler
@inject NavigationManager NavigationManager
@inject IAccountServiceClient AccountServiceClient

<div class="container">
    <div class="row vh-100 align-items-center justify-content-center">
        <div class="col col-lg-4 shadow p-3 mb-5 bg-body rounded">
            <EditForm Model="@LoginRequest" FormName="UserLoginForm" OnValidSubmit="RequestUserLogin">
                <DataAnnotationsValidator/>
                <div class="mt-3 d-flex justify-content-center">
                    <i class="bi bi-lock fs-1 fw-bold"></i>
                </div>
                <div class="mt-3">
                    <label class="form-label">Username</label>
                    <InputText class="form-control form-control-lg" @bind-Value="LoginRequest.Username"></InputText>
                    <ValidationMessage class="text-danger" For="(() => LoginRequest.Username)"></ValidationMessage>
                </div>
                <div class="mt-3">
                    <label class="form-label">Password</label>
                    <InputText type="password" class="form-control form-control-lg" @bind-Value="LoginRequest.Password"></InputText>
                    <ValidationMessage class="text-danger" For="(() => LoginRequest.Password)"></ValidationMessage>
                </div>
                <div class="mt-3 d-flex justify-content-center">
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-box-arrow-in-right"></i>
                        Login
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm] public LoginRequestModel LoginRequest { get; set; } = new();
    [CascadingParameter] public HttpContext? HttpContext { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var isUserAlreadyAuthenticated = HttpContext?.User?.Identity?.IsAuthenticated ?? false;
        if (isUserAlreadyAuthenticated)
        {
            return;
        }

        await RefreshSession();
    }

    private async Task RequestUserLogin()
    {
        var loginResponse = await AccountServiceClient.Login(LoginRequest);
        if (loginResponse.StatusCode != HttpStatusCode.OK)
        {
            //ToDo: Show error
            return;
        }

        SignInUser(loginResponse.Content);
    }

    private async Task RefreshSession()
    {
        var refreshLoginRequest = await TryGetLoginRefreshRequest();
        if (refreshLoginRequest == null)
        {
            return;
        }

        var loginResponse = await AccountServiceClient.RefreshSession(refreshLoginRequest);
        if (loginResponse.StatusCode == HttpStatusCode.OK)
        {
            SignInUser(loginResponse.Content);
        }
    }

    private async Task<LoginRefreshModel?> TryGetLoginRefreshRequest()
    {
        var accessToken = await CookieService.GetAsync(CookieKeys.AccessToken);
        var refreshToken = await CookieService.GetAsync(CookieKeys.RefreshToken);
        if (accessToken == null || refreshToken == null)
        {
            return null;
        }

        var loginRefreshModel = new LoginRefreshModel()
        {
            AccessToken = accessToken.Value,
            RefreshToken = refreshToken.Value,
        };

        return loginRefreshModel;
    }

    private void SignInUser(LoginResponseModel? loginResponse)
    {
        if (loginResponse == null)
        {
            //ToDo: Show error
            return;
        }

        if (HttpContext == null)
        {
            //ToDo: Show error
            return;
        }

        HttpContext.Response.Cookies.Append(CookieKeys.AccessToken, loginResponse.AccessToken);
        HttpContext.Response.Cookies.Append(CookieKeys.RefreshToken, loginResponse.RefreshToken);
        NavigationManager.NavigateTo(UserRouting.Authenticate);
    }
}