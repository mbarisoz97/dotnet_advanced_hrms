@page "/login"

@using BitzArt.Blazor.Cookies
@using Ehrms.Shared
@using System.Net.Http.Headers
@using Ehrms.Web.Routing
@layout EmptyLayout

@inject ICookieService CookieService
@inject ITokenHandler TokenHandler
@inject IHttpClientFactory HttpClientFactory
@inject IEndpointProvider EndpointProvider
@inject NavigationManager NavigationManager

<div class="container">
	<div class="row vh-100 align-items-center justify-content-center">
		<div class="col col-lg-4 shadow p-3 mb-5 bg-body rounded">
			<EditForm Model="@LoginRequest" FormName="UserLoginForm" OnValidSubmit="ValidSubmit">
				<DataAnnotationsValidator />
				<div class="mt-3 d-flex justify-content-center">
					<i class="bi bi-lock fs-1 fw-bold"></i>
				</div>
				<div class="mt-3">
					<label class="form-label">Username</label>
					<InputText class="form-control form-control-lg" @bind-Value="LoginRequest.Username"></InputText>
					<ValidationMessage class="text-danger" For="(()=> LoginRequest.Username)"></ValidationMessage>
				</div>
				<div class="mt-3">
					<label class="form-label">Password</label>
					<InputText type="password" class="form-control form-control-lg" @bind-Value="LoginRequest.Password"></InputText>
					<ValidationMessage class="text-danger" For="(()=> LoginRequest.Password)"></ValidationMessage>
				</div>
				<div class="mt-3 d-flex justify-content-center">
					<button type="submit" class="btn btn-success">
						<i class="bi bi-box-arrow-in-right"></i>
						Login
					</button>
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	[SupplyParameterFromForm]
	public LoginRequestModel? LoginRequest { get; set; } = new()
		{
			Username = "testUser",
			Password = "Passw0rd!"
		};

	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	protected async override Task OnInitializedAsync()
	{
		if (HttpContext == null || 
			HttpContext.User == null || 
			HttpContext.User.Identity == null)
		{
			return;
		}

		if (HttpContext.User.Identity.IsAuthenticated)
		{
			return;
		}

		if (await CanLoginWithExistingTokens())
		{
			NavigationManager.NavigateTo("/");
		}
	}

	private async Task ValidSubmit()
	{
		if (HttpContext == null)
		{
			return;
		}

		var client = HttpClientFactory.CreateClient("ApiGateway");
		var response = await client.PostAsJsonAsync(EndpointProvider.AutheticationEndpoint, LoginRequest);
		if (!response.IsSuccessStatusCode)
		{
			return;
		}

		var tokenDetails = await response.Content.ReadFromJsonAsync<LoginResponseModel>();
		var claimsPrincipal = TokenHandler.GetPrincipalFromExpiredToken(tokenDetails.AccessToken);

		var claims = new List<Claim>()
		{
			new Claim(ClaimTypes.Name, LoginRequest.Username)
		};
		claims.AddRange(claimsPrincipal!.Claims);

		var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
		var principal = new ClaimsPrincipal(identity);

		await HttpContext.SignInAsync(principal);

		HttpContext.Response.Cookies.Append(CookieKeys.AccessToken, tokenDetails.AccessToken);
		HttpContext.Response.Cookies.Append(CookieKeys.RefreshToken, tokenDetails.RefreshToken);

		NavigationManager.NavigateTo("/");
	}

	private async Task<bool> CanLoginWithExistingTokens()
	{
		var accessToken = await CookieService.GetAsync(CookieKeys.AccessToken);
		var refreshToken = await CookieService.GetAsync(CookieKeys.RefreshToken);

		if (accessToken == null || refreshToken == null)
		{
			return false;
		}

		var client = HttpClientFactory.CreateClient("ApiGateway");
		var response = await client.PostAsJsonAsync(EndpointProvider.RefreshEndpoint, new
		{
			AccessToken = accessToken.Value,
			RefreshToken = refreshToken.Value,
		});

		if (!response.IsSuccessStatusCode)
		{
			return false;
		}

		var tokenDetails = await response.Content.ReadFromJsonAsync<LoginResponseModel>();
		var claimsPrincipal = TokenHandler.GetPrincipalFromExpiredToken(tokenDetails.AccessToken);

		var offset = new DateTimeOffset(DateTime.UtcNow)
			.ToOffset(TimeSpan.FromMinutes(5));

		HttpContext.Response.Cookies.Append(CookieKeys.AccessToken, tokenDetails.AccessToken);
		HttpContext.Response.Cookies.Append(CookieKeys.RefreshToken, tokenDetails.RefreshToken);

		var identity = new ClaimsIdentity(claimsPrincipal.Claims, CookieAuthenticationDefaults.AuthenticationScheme);
		var principal = new ClaimsPrincipal(identity);

		await HttpContext.SignInAsync(principal);

		return true;
	}
}