@page "/Users"
@attribute [StreamRendering]
@attribute [Authorize]
@inject IUserServiceClient UserServiceClient
@inject IToastService ToastService

@if (_users == null)
{
    return;
}

<MudTable Items="@_users" Dense="true" Hover="true" Loading="@_loading" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Username">@context.Username</MudTd>
        <MudTd DataLabel="Email">@(context.Email ??= "-")</MudTd>
        <MudTd DataLabel="Is Active">@context.IsActive</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<ReadUserModel> _users;
    private string _searchString = "";
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        var response = await UserServiceClient.GetUsersAsync();
        if (response.StatusCode == HttpStatusCode.OK)
        {
            _users = response.Content;
        }
        else
        {
            ToastService.ShowError($"Could not load users. Service returned {response.StatusCode}");
        }
        _loading = false;
    }
}