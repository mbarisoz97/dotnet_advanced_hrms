@using Ehrms.Web.Extensions
@attribute [StreamRendering]

@inject IToastService ToastService
@inject ITrainingServiceClient TrainingServiceClient
@inject IEmployeeServiceClient EmployeeServiceClient

@if (Training == null)
{
    <Loading></Loading>
    return;
}

<EditForm Model="@Training" OnValidSubmit="ValidSubmit" FormName="ProjectForm">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mt-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="@Training.Name"></InputText>
        <ValidationMessage class="text-danger" For="(() => Training.Name)"></ValidationMessage>
    </div>
    <div class="mt-3">
        <label class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value="@Training.Description"></InputTextArea>
        <ValidationMessage class="text-danger" For="(() => Training.Description)"></ValidationMessage>
    </div>
    <div class="mt-3">
        <label class="form-label">Starts At</label>
        <DateTimePicker MinDate="DateTime.UtcNow" SelectedDateTime="@Training.StartsAt" SelectedDateTimeUpdated="UpdateTrainingStartTime"/>
        <ValidationMessage class="text-danger" For="(() => Training.StartsAt)"></ValidationMessage>
    </div>
    <div class="mt-3">
        <label class="form-label">Ends At</label>
        <DateTimePicker MinDate="DateTime.UtcNow" SelectedDateTime="@Training.EndsAt" SelectedDateTimeUpdated="UpdateTrainingEndTime"/>
        <ValidationMessage class="text-danger" For="(() => Training.EndsAt)"></ValidationMessage>
    </div>
    <div class="mt-3">
        <MudSelect T="EmployeeModel" Label="Select Participants" MultiSelection="true" @bind-SelectedValues="Participants" AdornmentIcon="@Icons.Material.Filled.Add" AnchorOrigin="Origin.BottomCenter">
            @foreach (var employee in Employees)
            {
                <MudSelectItem T="EmployeeModel" Value="@employee">@($"{employee.FirstName} {employee.LastName}")</MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="mt-3">
        <MudTooltip Text="Save">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit"/>
        </MudTooltip>
    </div>
</EditForm>

@code {
    [Parameter] public Guid Id { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public string Description { get; set; } = string.Empty;
    [Parameter] public IEnumerable<Guid>? SelectedEmployees { get; set; } = [];
    [Parameter] public EventCallback<TrainingModel> OnValidSubmit { get; set; }

    [SupplyParameterFromForm] public TrainingModel? Training { get; set; }
    [SupplyParameterFromForm] private TimeSpan? TrainingStartTime { get; set; }
    [SupplyParameterFromForm] private TimeSpan? TrainingEndTime { get; set; }

    private IEnumerable<EmployeeModel> Employees { get; set; } = [];
    private IEnumerable<EmployeeModel> Participants { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await FillEmployeeData();
        if (IsEditMode)
        {
            await FillExistingTrainingData();
        }
        else
        {
            await FillNewTrainingData();
        }
    }

    protected async Task ValidSubmit()
    {
        if (Training == null)
        {
            return;
        }

        Training.Participants = Participants.Select(x => x.Id).ToList();
        await OnValidSubmit.InvokeAsync(Training);
    }

    private async Task FillEmployeeData()
    {
        var response = await EmployeeServiceClient.GetEmployeesAsync();
        if (response.StatusCode == HttpStatusCode.OK)
        {
            Employees = response.Content ?? [];
        }
    }

    private Task FillNewTrainingData()
    {
        Training ??= new TrainingModel();
        Training.Description = Description;

        if (SelectedEmployees != null)
        {
            Participants = Employees.Where(x => SelectedEmployees.Contains(x.Id));
        }

        return Task.CompletedTask;
    }

    private async Task FillExistingTrainingData()
    {
        var response = await TrainingServiceClient.GetTrainingAsync(Id);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            Training = response.Content;
            if (Training != null)
            {
                Participants = Employees.Where(x => Training.Participants.Contains(x.Id));
            }
        }
    }

    private void UpdateTrainingStartTime(object? sender, DateTime? startTime)
    {
        if (startTime != null && Training != null)
        {
            Training.StartsAt = startTime;
        }
    }

    private void UpdateTrainingEndTime(object sender, DateTime? endTime)
    {
        if (endTime != null && Training != null)
        {
            Training.EndsAt = endTime;
        }
    }
}