@attribute [StreamRendering]

@inject ITrainingServiceClient TrainingServiceClient

@if (Training == null)
{
	<Loading></Loading>
	return;
}

<EditForm Model="@Training" OnValidSubmit="ValidSubmit" FormName="ProjectForm">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<div class="mt-3">
		<label class="form-label">Name</label>
		<InputText class="form-control" @bind-Value="@Training.Name"></InputText>
		<ValidationMessage class="text-danger" For="(()=> Training.Name)"></ValidationMessage>
	</div>
	<div class="mt-3">
		<label class="form-label">Description</label>
		<InputTextArea class="form-control" @bind-Value="@Training.Description"></InputTextArea>
		<ValidationMessage class="text-danger" For="(()=> Training.Description)"></ValidationMessage>
	</div>
	<div class="mt-3">
		<label class="form-label">Planned Date</label>
		<InputDate class="form-control" @bind-Value="@Training.PlannedAt"></InputDate>
		<ValidationMessage class="text-danger" For="(()=> Training.PlannedAt)"></ValidationMessage>
	</div>
	<div class="mt-3">
		<MudTooltip Text="Save">
			<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" />
		</MudTooltip>
	</div>
</EditForm>

@code {
	[Parameter] public Guid Id { get; set; }
	[Parameter] public bool IsEditMode { get; set; }
	[Parameter] public EventCallback<TrainingModel> OnValidSubmit { get; set; }

	[SupplyParameterFromForm]
	public TrainingModel? Training { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (!IsEditMode)
		{
			Training ??= new();
			return;
		}

		var response = await TrainingServiceClient.GetTrainingAsync(Id);
		Training = response.Content;
	}

	protected async Task ValidSubmit()
	{
		await OnValidSubmit.InvokeAsync(Training);
	}
}