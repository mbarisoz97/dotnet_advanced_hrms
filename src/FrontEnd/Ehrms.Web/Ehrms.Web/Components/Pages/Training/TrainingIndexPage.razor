@attribute [Route($"{TrainingRouting.Index}")]
@attribute [StreamRendering]
@attribute [Authorize]

@inject IToastService ToastService
@inject IModalService ModalService
@inject IDialogService DialogService
@inject ITrainingServiceClient TrainingServiceClient

<MudTable Items="@TrainingModels" Dense="true" Hover="true" Loading="@_loading" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Trainings</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudTooltip Text="Add Training">
            <MudIconButton Size="Size.Medium" Color="Color.Success" Icon="@Icons.Material.Filled.AddBox" @onclick="@(ShowCreateTrainingDialog)" />
        </MudTooltip>
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <ActivatorContent>
                <MudTooltip Text="Training Recommendation" Placement="Placement.Left">
                    <MudIconButton Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.ElectricBolt" @onclick="@(ShowTrainingRecommendationDialog)"></MudIconButton>
                </MudTooltip>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem @onclick="@(ShowTrainingRecommendationDialog)">
                    Create
                </MudMenuItem>
                <MudMenuItem Href="@(TrainingRouting.Recommendation)">
                    Show
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <ActivatorContent>
                <MudTooltip Text="Training Preferences" Placement="Placement.Left">
                    <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.Settings" @onclick="@(ShowCreatePreferenceDialog)"></MudIconButton>
                </MudTooltip>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem @onclick="@(ShowCreatePreferenceDialog)">
                    Create
                </MudMenuItem>
                <MudMenuItem Href="@(TrainingRouting.Preference)">
                    Show
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Planned Date</MudTh>
        <MudTh>Starts At</MudTh>
        <MudTh>Ends At</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Date">@context.PlannedAt</MudTd>
        <MudTd DataLabel="Date">@context.StartsAt</MudTd>
        <MudTd DataLabel="Date">@context.EndsAt</MudTd>
        <MudTd>
            <MudTooltip Text="Edit">
                <MudIconButton @onclick="@(() => ShowUpdateTrainingDialog(context))" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton @onclick="@(() => ShowDeleteTrainingDialog(context))" Color=" Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<TrainingModel>? TrainingModels { get; set; } = [];

    private bool _loading = true;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateTrainings();
    }
 
    private async Task UpdateTrainings()
    {
        _loading = true;

        var response = await TrainingServiceClient.GetTrainings();

        if (response.StatusCode == HttpStatusCode.OK)
        {
            TrainingModels = response.Content;
        }
        else
        {
            ToastService.ShowError($"Could not load trainings. Service returned {response.StatusCode}");
        }

        _loading = false;
    }

    private async Task ShowCreateTrainingDialog()
    {
        var dialog = DialogService.Show<TrainingCreatePage>("Create new training");
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await UpdateTrainings();
        }
    }
    private async Task ShowUpdateTrainingDialog(TrainingModel training)
    {
        var dialogParameters = new DialogParameters
        {
            {nameof(ProjectModel.Id), training.Id}
        };

        var dialog = DialogService.Show<TrainingUpdatePage>("Update training", dialogParameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await UpdateTrainings();
        }
    }
    private async Task ShowDeleteTrainingDialog(TrainingModel trainingModel)
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(trainingModel.Id), trainingModel.Id }
        };

        var dialog = DialogService.Show<TrainingDeletePage>("Delete a training", dialogParameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await UpdateTrainings();
        }
    }

    private async Task ShowTrainingRecommendationDialog()
    {
        var modalReference = DialogService.Show<TrainingRecommendationCreatePage>("Recommend Training");
        await modalReference.Result;
    }
    private async Task ShowCreatePreferenceDialog()
    {
        await DialogService.ShowAsync<TrainingPreferenceCreatePage>("Create new training preference");
    }
}