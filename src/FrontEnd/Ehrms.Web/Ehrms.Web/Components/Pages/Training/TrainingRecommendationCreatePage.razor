@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IToastService ToastService
@inject IProjectServiceClient ProjectServiceClient
@inject ITrainingServiceClient TrainingServiceClient

@if (_projects == null)
{
    <Loading></Loading>
    return;
}

<EditForm FormName="CreateTrainingRecommendationForm" Model="@RecommendationRequestModel" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mt-3">
        <MudTextField @bind-Value="RecommendationRequestModel.Title" Label="Title" Variant="Variant.Filled"></MudTextField>
        <ValidationMessage class="text-danger" For="(()=> RecommendationRequestModel.Title)"></ValidationMessage>
    </div>
    <div class="mt-3">
        <MudSelect T="Guid" @bind-Value="RecommendationRequestModel.ProjectId" Label="Select a project" OpenIcon="@Icons.Material.Filled.Folder" AdornmentColor="Color.Secondary">
            @foreach (var item in _projects)
            {
                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="mt-3">
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" type="submit">
            <i class="bi bi-floppy"></i> Save
        </button>
    </div>
</EditForm>

@code {
    private IEnumerable<ProjectModel>? _projects;
    
    [SupplyParameterFromForm]
    private CreateTrainingRecommendationRequestModel RecommendationRequestModel { get; set; } = new();
    
    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var response = await ProjectServiceClient.GetProjectsAsync();
        if (response.StatusCode == HttpStatusCode.OK)
        {
            _projects = response.Content;
        }
        else
        {
            ToastService.ShowError($"Could not load projects. Service returned {response.StatusCode}");
        }
    }

    private async Task ValidSubmit()
    {
        var response = await TrainingServiceClient.CreateTrainingRecommendationRequest(RecommendationRequestModel);
        if (response.StatusCode != HttpStatusCode.OK)
        {
            ToastService.ShowError($"Could create training recommendation request. Service returned {response.StatusCode}");
        }
        else
        {
            await ModalInstance.CloseAsync(ModalResult.Ok());
        }
    }
}