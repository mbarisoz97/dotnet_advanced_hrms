@attribute [Route($"{TrainingRouting.Recommendation}")]
@attribute [Authorize]
@attribute [StreamRendering]

@inject IToastService ToastService
@inject IDialogService DialogService
@inject ITrainingRecommendationServiceClient TrainingRecommendationServiceClient

<MudTable Dense="true" Hover="true" Bordered="true" Striped="true"
          Loading="@_isLoading"
          Items="@_trainingRecommendationRequests"
          Filter="new Func<ReadTrainingRecommendationRequestModel, bool>(SearchFilter)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Training Recommendation Requests</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudTooltip Text="Add Training Recommendation">
            <MudIconButton Size="Size.Medium" Color="Color.Success" Icon="@Icons.Material.Filled.AddBox" @onclick="@(ShowTrainingRecommendationDialog)" />
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Request Status</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Created At</MudTh>
        <MudTh>Last Update</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Request Status" Class="d-flex justify-center flex-grow-1">
            <MudTooltip Text="@context.RequestStatus.ToString()">
                @if (context.RequestStatus == RequestStatus.Pending)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Pending" Color="Color.Warning" />
                }
                else if (context.RequestStatus == RequestStatus.Accepted)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Circle" Color="Color.Info" />
                }
                else if (context.RequestStatus == RequestStatus.Completed)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.DoneAll" Color="Color.Success" />
                }
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Create Date">@context.CreatedAt</MudTd>
        <MudTd DataLabel="Last Update">@context.UpdatedAt</MudTd>
        <MudTd>
            <MudTooltip Text="Delete">
                <MudIconButton @onclick="@(() => ShowDeleteConfirmationPage(context.Id))" Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" />
            </MudTooltip>
            @if (context.RequestStatus == RequestStatus.Completed)
            {
                <MudTooltip Text="Read More">
                    <MudIconButton @onclick="@(() => ShowTrainingRecommendationResults(context.Id))" Size="Size.Small" Icon="@Icons.Material.Filled.ReadMore" />
                </MudTooltip>
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<ReadTrainingRecommendationRequestModel>? _trainingRecommendationRequests;

    private bool _isLoading = true;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTrainingRecommendationRequests();
    }

    private async Task LoadTrainingRecommendationRequests()
    {
        ShowLoadingBar();

        var response = await TrainingRecommendationServiceClient.GetTrainingRecommendationRequests();
        if (response.StatusCode == HttpStatusCode.OK)
        {
            _trainingRecommendationRequests = response.Content;
        }
        else
        {
            ToastService.ShowError($"Could not load training recommendation requests. Service returned : {response.StatusCode}");
        }

        HideLoadingBar();
    }

    private void ShowLoadingBar() => _isLoading = true;
    private void HideLoadingBar() => _isLoading = false;

    private async Task ShowTrainingRecommendationResults(Guid requestId)
    {
        var parameters = new DialogParameters()
        {
            { nameof(TrainingRecommendationResultPage.Id), requestId  }
        };

        var dialog = DialogService.Show<TrainingRecommendationResultPage>("Training Recommendations", parameters);
        var result = await dialog.Result;

        await EvaluateDialogResult(result);
    }
    private async Task ShowDeleteConfirmationPage(Guid id)
    {
        var parameters = new DialogParameters
        {
            { nameof(TrainingRecommendationDeletePage.Id), id }
        };

        var dialog = DialogService.Show<TrainingRecommendationDeletePage>("Confirm", parameters);
        var result = await dialog.Result;

        await EvaluateDialogResult(result);
    }
    private async Task ShowTrainingRecommendationDialog()
    {
        var dialog = DialogService.Show<TrainingRecommendationCreatePage>("Recommend Training");
        var result = await dialog.Result;

        await EvaluateDialogResult(result);
    }

    private async Task EvaluateDialogResult(DialogResult? result)
    {
        bool isReloadRequired = result != null && !result.Canceled;
        if (isReloadRequired)
        {
            await LoadTrainingRecommendationRequests();
        }
    }

    private bool SearchFilter(ReadTrainingRecommendationRequestModel element) => Search(element, _searchString);
    private static bool Search(ReadTrainingRecommendationRequestModel element, string searchString)
    {
        return (string.IsNullOrWhiteSpace(searchString) ||
                element.Title!.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                element.RequestStatus!.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase));
    }
}