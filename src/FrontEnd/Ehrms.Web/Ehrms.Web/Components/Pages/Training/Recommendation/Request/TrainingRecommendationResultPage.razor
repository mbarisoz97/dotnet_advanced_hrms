@inject IToastService ToastService
@inject ITrainingRecommendationServiceClient TrainingRecommendationService

@if (_recommendationResults == null)
{
    <Loading></Loading>
    return;
}

<MudStack>
    @foreach (var result in _recommendationResults)
    {
        <MudExpansionPanel HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Class="mt-1">@result.Skill</MudText>
                    <MudBadge Content="@result.Employees.Count" Overlap="true" Color="Color.Success" Overlap="true" Class="d-flex ml-auto">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Default"/>
                    </MudBadge>
                </div>
            </TitleContent>
            <ChildContent>
                <MudTable Items="@result.Employees" Dense="false">
                    <ToolBarContent>
                        <div class="d-flex justify-content-end">
                            <MudTooltip Text="Add Training">
                                <MudIconButton Size="Size.Medium" Color="Color.Success" Icon="@Icons.Material.Filled.AddBox"/>
                            </MudTooltip>
                        </div>
                    </ToolBarContent>
                    <RowTemplate>
                        <MudTd>
                            <MudLink Href=@($"{EmployeeRouting.Details}/{@context.Id}")>
                                @context.FullName
                            </MudLink>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </ChildContent>
        </MudExpansionPanel>
    }
</MudStack>

@code {
    [Parameter] public Guid Id { get; set; }

    private IEnumerable<ReadTrainingRecommendationResultModel>? _recommendationResults;

    protected override async Task OnInitializedAsync()
    {
        var response = await TrainingRecommendationService.GetRecommendationResults(Id);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            _recommendationResults = response.Content;
        }
        else
        {
            ToastService.ShowError($"Could not load recommendation results. Service returned {response.StatusCode}");
        }
    }
}