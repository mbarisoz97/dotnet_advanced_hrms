@attribute [Route(PageRouting.Title.Index)]
@attribute [StreamRendering]
@attribute [Authorize]

@inject IToastService ToastService
@inject IDialogService DialogService
@inject IEmployeeTitleClient EmployeeTitleClient

<MudTable Items="@_employeeTitles"
          Dense="true"
          Hover="true"
          Loading="@_loading"
          Bordered="true"
          Striped="true"
          Filter="new Func<EmployeeTitleModel, bool>(SearchFilter)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Employee Titles</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search Employee Title" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudTooltip Text="Add New Title">
            <MudIconButton Size="Size.Medium" Color="Color.Success" Icon="@Icons.Material.Filled.Add" OnClick="ShowCreateTitleDialog" />
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.TitleName</MudTd>
        <MudTd>
            <MudTooltip Text="Delete">
                <MudIconButton @onclick="@(()=>ShowDeleteTitleDialog(context))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
            </MudTooltip>
            <MudTooltip Text="Edit">
                <MudIconButton @onclick="@(()=>ShowUpdateTitleDialog(context))" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<EmployeeTitleModel>? _employeeTitles;

    private bool _loading;
    private string _searchString = "";
    private void ShowLoadingBar()
    {
        _loading = true;
    }
    private void HideLoadingBar()
    {
        _loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployeeTitles();
    }

    private async Task LoadEmployeeTitles()
    {
        ShowLoadingBar();
        await GetEmployeeTitles();
        HideLoadingBar();
    }

    private async Task GetEmployeeTitles()
    {
        var response = await EmployeeTitleClient.GetAllTitles();
        if (response.StatusCode == HttpStatusCode.OK)
        {
            _employeeTitles = response.Content ?? [];
        }
        else
        {
            ToastService.ShowError($"Could not load employee titles. Service returned {response.StatusCode}");
        }
    }

    private async Task ShowCreateTitleDialog()
    {
        var dialog = DialogService.Show<TitleCreatePage>("Create new title");
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadEmployeeTitles();
        }
    }
    private async Task ShowDeleteTitleDialog(EmployeeTitleModel employeeTitleModel)
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(TitleDeletePage.TitleId), employeeTitleModel.Id }
        };

        var dialog = DialogService.Show<TitleDeletePage>("Delete title", dialogParameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadEmployeeTitles();
        }
    }
    private async Task ShowUpdateTitleDialog(EmployeeTitleModel employeeTitleModel)
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(TitleUpdatePage.TitleId), employeeTitleModel.Id }
        };

        var modalReference = DialogService.Show<TitleUpdatePage>("Update title", dialogParameters);
        var result = await modalReference.Result;

        if (result != null && !result.Canceled)
        {
            await LoadEmployeeTitles();
        }
    }

    private bool SearchFilter(EmployeeTitleModel element) => Search(element, _searchString);
    private bool Search(EmployeeTitleModel element, string searchString)
    {
        if (element == null)
        {
            return false;
        }

        return (string.IsNullOrWhiteSpace(searchString) || element.TitleName!.Contains(searchString, StringComparison.OrdinalIgnoreCase));
    }
}