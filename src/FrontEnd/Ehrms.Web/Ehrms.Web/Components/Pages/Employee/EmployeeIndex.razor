@attribute [Authorize]
@attribute [StreamRendering]
@attribute [Route(EmployeeRouting.Index)]

@inject IEmployeeServiceClient EmployeeServiceServiceClient

<MudTable Items="@_employees"
		  Dense="true"
		  Hover="true"
		  Loading="@Loading"
		  Bordered="true"
		  Striped="true"
		  Filter="new Func<EmployeeModel, bool>(SearchFilter)">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Employees</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		<MudTooltip Text="Add Employee">
			<MudIconButton Size="Size.Large" Color="Color.Success" Icon="@Icons.Material.Filled.AddBox" Href="@(EmployeeRouting.Create)" />
		</MudTooltip>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>First Name</MudTh>
		<MudTh>Last Name</MudTh>
		<MudTh>Date Of Birth</MudTh>
		<MudTh>Qualification</MudTh>
		<MudTh></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Name">@context.FirstName</MudTd>
		<MudTd DataLabel="Date">@context.LastName</MudTd>
		<MudTd DataLabel="Name">@context.DateOfBirth</MudTd>
		<MudTd DataLabel="Date">@context.Qualification</MudTd>
		<MudTd>
			<MudTooltip Text="Edit">
				<MudIconButton Href="@($"{EmployeeRouting.Update}/{context.Id}")" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
			</MudTooltip>
			<MudTooltip Text="Delete">
				<MudIconButton Href="@($"{EmployeeRouting.Delete}/{context.Id}")" Color=" Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
			</MudTooltip>
		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>

@code {
	private IEnumerable<EmployeeModel>? _employees { get; set; } = [];

	private bool Loading { get; set; } = true;
	private string SearchString { get; set; } = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		Loading = true;
		var response = await EmployeeServiceServiceClient.GetEmployeesAsync();
		if (response.StatusCode == HttpStatusCode.OK)
		{
			_employees = response.Content;
		}
		Loading = false;
	}

	private bool SearchFilter(EmployeeModel element) => Search(element, SearchString);

	private bool Search(EmployeeModel element, string searchString)
	{
		if (element == null)
		{
			return false;
		}

		return (string.IsNullOrWhiteSpace(searchString) ||
			element.FirstName!.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			element.LastName!.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			element.Qualification!.Contains(searchString, StringComparison.OrdinalIgnoreCase));
	}
}