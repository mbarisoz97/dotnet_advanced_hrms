@using System.Net
@attribute [Authorize]
@attribute [StreamRendering]
@attribute [Route($"{SkillRouting.Index}")]

@inject ISkillServiceClient SkillServiceClient

@if (Skills == null)
{
	return;
}

<div class="row">
	<div class="d-flex flex-row justify-content-between">
		<SearchBar SearchBarPlaceHolder="Search Skills"></SearchBar>
		<div>
			<a href="@SkillRouting.Create" class="btn btn-success">
				<i class="bi bi-person-plus"></i>
			</a>
		</div>
	</div>
</div>

<div class="row">
	<div class="table-responsive-lg">
		<table class="table table-hover table-borderless">
			<thead>
				<tr>
					<th>#</th>
					<th>Skill</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var skill in Skills)
				{
					<tr>
						<td></td>
						<td>@skill.Name</td>
						<td>
							<NavLink href="@($"{SkillRouting.Update}/{skill.Id}")" class="text-success">
								<i class="bi bi-pencil-square"></i>
							</NavLink>
							<NavLink href="@($"{SkillRouting.Delete}/{skill.Id}")" class="text-danger">
								<i class="bi bi-trash"></i>
							</NavLink>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

@code {
	private IEnumerable<SkillModel>? Skills { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		var response = await SkillServiceClient.GetSkillsAsync();
		if (response.StatusCode == HttpStatusCode.OK)
		{
			Skills = response.Content;			
		}
	}
}