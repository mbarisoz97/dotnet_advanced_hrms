@attribute [Authorize]
@attribute [StreamRendering]
@attribute [Route($"{SkillRouting.Index}")]

@inject IToastService ToastService
@inject IModalService ModalService
@inject ISkillServiceClient SkillServiceClient
@inject NavigationManager NavigationManager

@if (Skills == null)
{
	return;
}

<div class="row">
	<div class="d-flex flex-row justify-content-between">
		<SearchBar SearchBarPlaceHolder="Search Skills"></SearchBar>
		<div>
			<a @onclick="@(()=>ShowCreateSkillDialog())" class="btn btn-success">
				<i class="bi bi-person-plus"></i>
			</a>
		</div>
	</div>
</div>

<div class="row">
	<div class="table-responsive-lg">
		<table class="table table-hover table-borderless">
			<thead>
				<tr>
					<th>#</th>
					<th>Skill</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var skill in Skills)
				{
					<tr>
						<td></td>
						<td>@skill.Name</td>
						<td>
							<button class="text-danger" @onclick="@(()=>ShowUpdateSkillDialog(skill))">
								<i class="bi bi-pencil-square"></i>
							</button>
							<button class="text-danger" @onclick="@(()=>ShowDeleteConfirmationDialog(skill))">
								<i class="bi bi-trash"></i>
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>


@code {
	private ICollection<SkillModel>? Skills { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		await UpdateSkills();
	}

	private async Task UpdateSkills()
	{
		var response = await SkillServiceClient.GetSkillsAsync();
		if (response.StatusCode == HttpStatusCode.OK)
		{
			Skills = response.Content.ToList();
		}
	}

	private async Task ShowUpdateSkillDialog(SkillModel skill)
	{
		var parameters = new ModalParameters()
			.Add(nameof(DeleteSkillPage.Id), skill.Id);

		var modalReference = ModalService.Show<SkillUpdatePage>("Update skill information", parameters);
		var result = await modalReference.Result;

		await UpdateSkills();
	}

	private async Task ShowCreateSkillDialog()
	{
		var modalReference = ModalService.Show<SkillCreatePage>("Create a new skill");
		var result = await modalReference.Result;

		await UpdateSkills();
	}

	private async Task ShowDeleteConfirmationDialog(SkillModel skill)
	{
		var parameters = new ModalParameters()
			.Add(nameof(DeleteSkillPage.Id), skill.Id);

		var modalReference = ModalService.Show<DeleteSkillPage>("Confirm", parameters);
		var result = await modalReference.Result;

		if (result.Confirmed)
		{
			Skills?.Remove(skill);
			ToastService.ShowSuccess("Skill deleted successfully");
		}
	}
}