@inject IToastService ToastService
@inject ISkillServiceClient SkillService
@attribute [StreamRendering]

@if (Skill == null)
{
	return;
}

<EditForm Model="@Skill" OnValidSubmit="ValidSubmit" FormName="SkillForm">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<div class="mt-3">
		<label class="form-label">Skill</label>
		<InputText class="form-control" @bind-Value="@Skill.Name"></InputText>
		<ValidationMessage class="text-danger" For="(()=> Skill.Name)"></ValidationMessage>
	</div>
	<div class="mt-3">
		<button class="btn btn-primary" type="submit">
			<i class="bi bi-floppy"></i> Save
		</button>
	</div>
</EditForm>

@code {
	[Parameter]
	public Guid Id { get; set; }

	[Parameter]
	public bool IsEditMode { get; set; }

	[SupplyParameterFromForm]
	public SkillModel? Skill { get; set; }

	[Parameter]
	public EventCallback<SkillModel> OnValidSubmit { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if(IsEditMode)
		{
			await SetFormData();
		}
		else
		{
			ClearForm();
		}
	}

	protected async Task ValidSubmit()
	{
		await OnValidSubmit.InvokeAsync(Skill);

		if (!IsEditMode)
		{
			ClearForm();
		}
	}

	private void ClearForm()
	{
		Skill = new();
	}

	private async Task SetFormData()
	{
		var response = await SkillService.GetSkillAsync(Id);
		if (response.StatusCode == HttpStatusCode.OK)
		{
			Skill = response.Content;
		}
		else
		{
			ToastService.ShowError($"Skill service returned : {response.StatusCode}");
		}
	}
}