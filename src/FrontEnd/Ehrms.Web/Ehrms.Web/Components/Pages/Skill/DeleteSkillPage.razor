@attribute [Authorize]
@attribute [StreamRendering]

@inject IToastService ToastService
@inject ISkillServiceClient SkillServiceClient

<MudDialog>
	<DialogContent>
		@if (Skill == null)
		{
			<h1>Loading..</h1>
		}
		else
		{
			<div class="form-group">
				<table class="table">
					<tbody>
						<tr>
							<td>Skill Name</td>
							<td>@Skill.Name</td>
						</tr>
					</tbody>
				</table>
			</div>
			<div class="form-group">
				<button @onclick="Remove" class="btn btn-danger">Delete</button>
				<button @onclick="Cancel" class="btn btn-warning">Cancel</button>
			</div>
		}
	</DialogContent>
</MudDialog>

@code {
	[Parameter]
	public Guid Id { get; set; }

	[CascadingParameter] 
	private MudDialogInstance? MudDialog { get; set; }

	private SkillModel? Skill { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var response = await SkillServiceClient.GetSkillAsync(Id);
		if (response.StatusCode == HttpStatusCode.OK)
		{
			Skill = response.Content;
		}
		else
		{
			ToastService.ShowError($"Could not load skill data. Service returned {response.StatusCode}");
		}
	}

	protected async Task Remove()
	{
		var response = await SkillServiceClient.DeleteEmployeeAsync(Id);
		if (response.StatusCode == HttpStatusCode.NoContent)
		{
			MudDialog?.Close();
			return;
		}

		ToastService.ShowError($"Service returned : {response.StatusCode}");
	}

	protected void Cancel()
	{
		MudDialog?.Close(DialogResult.Cancel());
	}
}