@attribute [Route(ProjectRouting.Index)]
@attribute [StreamRendering]

@inject IModalService ModalService
@inject IToastService ToastService
@inject IProjectServiceClient ProjectServiceClient
@inject NavigationManager NavigationManager

<MudTable Items="@Projects"
		  Dense="true"
		  Hover="true"
		  Loading="@Loading"
		  Bordered="true"
		  Striped="true"
		  Filter="new Func<ProjectModel, bool>(SearchFilter)">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Projects</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		<MudTooltip Text="Add Project">
			<MudIconButton Size="Size.Large" Color="Color.Success" Icon="@Icons.Material.Filled.AddBox" @onclick="ShowCreateProjectDialog" />
		</MudTooltip>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Name">@context.Name</MudTd>
		<MudTd>
			<MudTooltip Text="Edit">
				<MudIconButton Icon="@Icons.Material.Filled.ModeEdit" @onclick="@(()=>ShowUpdateProjectDialog(context))" />
			</MudTooltip>
			<MudTooltip Text="Delete">
				<MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>ShowDeleteConfirmationDialog(context))" />
			</MudTooltip>
			<MudTooltip Text="Read More">
				<MudIconButton Icon="@Icons.Material.Filled.ReadMore" Href=@($"{ProjectRouting.History}/{context.Id}") />
			</MudTooltip>
		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>

@code {
	private IEnumerable<ProjectModel>? Projects { get; set; }

	private bool Loading { get; set; } = true;
	private string SearchString { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await UpdateProjects();
	}

	private void ShowLoadingBar()
	{
		Loading = true;
	}
	private void HideLoadingBar()
	{
		Loading = false;
	}

	private async Task UpdateProjects()
	{
		ShowLoadingBar();
		var response = await ProjectServiceClient.GetProjectsAsync();
		if (response.StatusCode == HttpStatusCode.OK)
		{
			Projects = response.Content;
		}
		else
		{
			ToastService.ShowError($"Service returned : {response.StatusCode}");
		}
		HideLoadingBar();
	}

	private async Task ShowUpdateProjectDialog(ProjectModel project)
	{
		var modalParameters = new ModalParameters()
			.Add(nameof(ProjectModel.Id), project.Id);

		var modalReference = ModalService.Show<ProjectUpdatePage>("Update project", modalParameters);
		var result = await modalReference.Result;

		await UpdateProjects();
	}

	private async Task ShowCreateProjectDialog()
	{
		var modalReference = ModalService.Show<ProjectCreatePage>("Create a new project");
		await UpdateProjects();
	}

	private async Task ShowDeleteConfirmationDialog(ProjectModel project)
	{
		var modalParameters = new ModalParameters()
			.Add(nameof(ProjectModel.Id), project.Id);

		var modalReference = ModalService.Show<ProjectDeletePage>("Delete a project", modalParameters);
		var result = await modalReference.Result;

		if (result.Confirmed)
		{
			ToastService.ShowSuccess("Project deleted successfully.");
			await UpdateProjects();
		}
	}

	private bool SearchFilter(ProjectModel element) => Search(element, SearchString);
	private bool Search(ProjectModel element, string searchString)
	{
		if (element == null)
		{
			return false;
		}

		return (string.IsNullOrWhiteSpace(searchString) ||
			element.Name!.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			element.Description!.Contains(searchString, StringComparison.OrdinalIgnoreCase));
	}
}