@attribute [StreamRendering]

@inject IToastService ToastService
@inject ISkillServiceClient SkillServiceClient
@inject IProjectServiceClient ProjectServiceClient
@inject IEmployeeServiceClient EmployeeServiceClient

@if (Project == null)
{
	<Loading></Loading>
	return;
}

<EditForm Model="@Project" OnValidSubmit="ValidSubmit" FormName="ProjectForm">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<div class="mt-3">
		<label class="form-label">Name</label>
		<InputText class="form-control" @bind-Value="@Project.Name"></InputText>
		<ValidationMessage class="text-danger" For="(()=> Project.Name)"></ValidationMessage>
	</div>
	<div class="mt-3">
		<label class="form-label">Description</label>
		<InputText class="form-control" @bind-Value="@Project.Description"></InputText>
		<ValidationMessage class="text-danger" For="(()=> Project.Description)"></ValidationMessage>
	</div>
	<div class="mt-3">
		<MudSelect T="EmployeeModel" Label="Employees" MultiSelection="true" @bind-SelectedValues="SelectedEmployees" AdornmentIcon="@Icons.Material.Filled.Add" AnchorOrigin="Origin.BottomCenter">
			@foreach (var employee in Employees)
			{
				<MudSelectItem T="EmployeeModel" Value="@employee">@($"{employee.FirstName} {employee.LastName}")</MudSelectItem>
			}
		</MudSelect>
	</div>
	<div class="mt-3">
		<MudSelect T="SkillModel" Label="Required Skills" MultiSelection="true" @bind-SelectedValues="SelectedSkills" AdornmentIcon="@Icons.Material.Filled.Add" AnchorOrigin="Origin.BottomCenter">
			@foreach (var skill in Skills)
			{
				<MudSelectItem T="SkillModel" Value="@skill">@(skill.Name)</MudSelectItem>
			}
		</MudSelect>
	</div>
	<div class="mt-3">
		<button class="btn btn-primary" type="submit">
			<i class="bi bi-floppy"></i> Save
		</button>
	</div>
</EditForm>

@code {
	[Parameter] public bool IsEditMode { get; set; }
	[Parameter] public Guid Id { get; set; }
	[Parameter] public EventCallback<ProjectModel> OnValidSubmit { get; set; }
	[SupplyParameterFromForm] public ProjectModel? Project { get; set; }

	private IEnumerable<EmployeeModel> Employees { get; set; } = Enumerable.Empty<EmployeeModel>();
	private IEnumerable<EmployeeModel> SelectedEmployees { get; set; } = Enumerable.Empty<EmployeeModel>();

	private IEnumerable<SkillModel> Skills { get; set; } = Enumerable.Empty<SkillModel>();
	private IEnumerable<SkillModel> SelectedSkills { get; set; } = Enumerable.Empty<SkillModel>();

	protected async Task ValidSubmit()
	{
		Project!.Employees = SelectedEmployees.Select(x => x.Id).ToList() ?? [];
		Project!.RequiredSkills = SelectedSkills.Select(x => x.Id).ToList() ?? [];

		await OnValidSubmit.InvokeAsync(Project);
	}

	protected override async Task OnInitializedAsync()
	{
		await FillSkillDataInForm();
		await FillEmployeeDataInForm();

		if (IsEditMode)
		{
			await FillProjectDataInForm();
		}
		else
		{
			Project ??= new();
		}
	}

	private async Task FillEmployeeDataInForm()
	{
		var response = await EmployeeServiceClient.GetEmployeesAsync();
		if (response.StatusCode == HttpStatusCode.OK)
		{
			Employees = response.Content ?? [];
		}
		else
		{
			ToastService.ShowError($"Could not get employee list. Service returned {response.StatusCode}");
		}
	}

	private async Task FillProjectDataInForm()
	{
		var response = await ProjectServiceClient.GetProjectAsync(Id);
		if (response.StatusCode == HttpStatusCode.OK)
		{
			Project = response.Content;
			if (IsEditMode && Project != null)
			{
				SelectedEmployees = Employees.Where(x => Project.Employees.Contains(x.Id));
				SelectedSkills = Skills.Where(x => Project.RequiredSkills.Contains(x.Id));
			}
		}
		else
		{
			ToastService.ShowError($"Could not load project data. Service returned : {response.StatusCode}");
		}
	}

	private async Task FillSkillDataInForm()
	{
		var response = await SkillServiceClient.GetSkillsAsync();
		if (response.StatusCode == HttpStatusCode.OK)
		{
			Skills = response.Content ?? [];
		}
		else
		{
			ToastService.ShowError($"Could not load project data. Service returned : {response.StatusCode}");
		}
	}
}