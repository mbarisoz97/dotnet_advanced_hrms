@attribute [Authorize]

@inject IProjectServiceClient ProjectServiceClient
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<MudDialog>
    <DialogContent>
        @if (Project == null)
        {
            <h1>Loading..</h1>
            return;
        }
        <div class="form-group">
            <table class="table">
                <tbody>
                    <tr>
                        <td>Project</td>
                        <td>@Project.Name</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="form-group">
            <button @onclick="Remove" class="btn btn-danger">Delete</button>
            <button @onclick="Cancel" class="btn btn-warning">Cancel</button>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    private ProjectModel? Project;

    protected override async Task OnInitializedAsync()
    {
        var response = await ProjectServiceClient.GetProjectAsync(Id);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            Project = response.Content;
        }
    }

    protected async Task Remove()
    {
        var response = await ProjectServiceClient.DeleteProjectAsync(Id);
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            MudDialog?.Close();
        }
        else
        {
            ToastService.ShowError($"Service returned : {response.StatusCode}");
        }
    }

    protected void Cancel()
    {
        MudDialog?.Close(DialogResult.Cancel());
    }
}