@attribute [Route($"{ProjectRouting.History}/{{id:guid}}")]
@attribute [Authorize]
@attribute [StreamRendering]

@inject IToastService ToastService
@inject IProjectServiceClient ProjectServiceClient

<MudTable Items="@EmploymentRecords"
		  Dense="true"
		  Hover="true"
		  Loading="@Loading"
		  Bordered="true"
		  Striped="true">
	<ToolBarContent>
		<MudIconButton Size="Size.Medium" Icon="@Icons.Material.Filled.ArrowBack" Href="@(ProjectRouting.Index)" />
		<MudText Typo="Typo.h6">Employments</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh></MudTh>
		<MudTh>Employee</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>
			@if (context.EmploymentRecords.Any(x => x.EndedAt == null))
			{
				<MudTimelineItem Color="Color.Success" />
			}
			else
			{
				<MudTimelineItem Color="Color.Error" />
			}
		</MudTd>
		<MudTd>
			<MudExpansionPanel Expanded="false" Text="@context.EmployeeName">
				<MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start">
					@foreach (var employmentRecord in context.EmploymentRecords.OrderBy(x => x.StartedAt))
					{
						if (employmentRecord.EndedAt != null)
						{
							<MudTimelineItem Color="Color.Error">
								<MudText Align="Align.Start">@employmentRecord.StartedAt - @employmentRecord.EndedAt</MudText>
							</MudTimelineItem>
						}
						else
						{
							<MudTimelineItem Color="Color.Success">
								<MudText Align="Align.Start">@employmentRecord.StartedAt</MudText>
							</MudTimelineItem>
						}
					}
				</MudTimeline>
			</MudExpansionPanel>
		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>

@code {
	[Parameter]
	public Guid Id { get; set; }

	private IEnumerable<GroupedEmploymentModel>? EmploymentRecords { get; set; } = [];

	private bool Loading { get; set; }
	private string SearchString { get; set; } = "";

	protected override async Task OnInitializedAsync()
	{
		ShowLoadingBar();

		var response = await ProjectServiceClient.GetProjectHistoryAsync(Id);
		if (response.StatusCode == HttpStatusCode.OK)
		{
			EmploymentRecords = GetGroupedEmployments(response.Content);
		}
		else
		{
			ToastService.ShowError($"Could not read project history. Service returned {response.StatusCode}");

		}

		HideLoadingBar();
	}

	private void ShowLoadingBar()
	{
		Loading = true;
	}

	private void HideLoadingBar()
	{
		Loading = false;
	}

	private IEnumerable<GroupedEmploymentModel> GetGroupedEmployments(IEnumerable<EmploymentModel>? employments)
	{
		if (employments == null)
		{
			return [];
		}

		return employments.GroupBy(x => new { x.EmployeeId, x.EmployeeName })
			.Select(y => new GroupedEmploymentModel()
				{
					EmployeeId = y.Key.EmployeeId,
					EmployeeName = y.Key.EmployeeName,
					EmploymentRecords = y.ToList()
				});
	}
}