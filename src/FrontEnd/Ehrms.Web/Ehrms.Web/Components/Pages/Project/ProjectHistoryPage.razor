@attribute [Authorize]
@attribute [StreamRendering]

@using ApexCharts

@inject IToastService ToastService
@inject IProjectServiceClient ProjectServiceClient


@if (EmploymentRecords == null)
{
	<MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
	<ApexChart TItem="ProjectEmploymentModel" Options=options XAxisType="XAxisType.Datetime">
		<ApexRangeSeries TItem="ProjectEmploymentModel"
						 Items="EmploymentRecords"
						 XValue="@(e => e.EmployeeName)"
						 YMinValue="@(e =>e.StartedAt.ToDateTime(TimeOnly.MinValue).ToUnixTimeMilliseconds())"
						 YMaxValue="@(e => e.EndedAt != null
												? ((DateOnly)e.EndedAt!).ToDateTime(TimeOnly.MinValue).ToUnixTimeMilliseconds()
												: DateTime.Now.ToUnixTimeMilliseconds())" />
	</ApexChart>
}

@code {
	[Parameter]
	public Guid Id { get; set; }

	private ApexChartOptions<ProjectEmploymentModel>? options;
	private IEnumerable<ProjectEmploymentModel>? EmploymentRecords { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var response = await ProjectServiceClient.GetProjectHistoryAsync(Id);
		if (response.StatusCode == HttpStatusCode.OK)
		{
			EmploymentRecords = response.Content;
		}
		else
		{
			ToastService.ShowError($"Could not read project history. Service returned {response.StatusCode}");
		}

		options = new ApexChartOptions<ProjectEmploymentModel>
			{
				PlotOptions = new PlotOptions
				{
					Bar = new PlotOptionsBar
					{
						Horizontal = true
					}
				},
				Tooltip = new ApexCharts.Tooltip
				{
					X = new TooltipX
					{
						Format = "dd MMM yyyy HH:mm"
					}
				}
			};
	}
}