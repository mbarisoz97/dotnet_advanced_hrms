@inject IPaymentCategoryClient PaymentCategoryClient
@attribute [StreamRendering]

@if (PaymentCategoryModel == null)
{
    if (_isLoading)
    {
        <Loading></Loading>
    }
    return;
}

<EditForm Model="PaymentCategoryModel" OnValidSubmit="ValidSubmit" FormName="PaymentCategoryForm">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mt-3">
        <label class="form-label">Category Name</label>
        <InputText class="form-control" @bind-Value="@PaymentCategoryModel.Name"></InputText>
        <ValidationMessage class="text-danger" For="(()=> PaymentCategoryModel.Name)"></ValidationMessage>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" type="submit">
            <i class="bi bi-floppy"></i> Save
        </button>
    </div>
</EditForm>

@code {
    [Parameter] public Guid Id { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public EventCallback<PaymentCategoryModel> OnValidSubmit { get; set; }

    [SupplyParameterFromForm]
    public PaymentCategoryModel? PaymentCategoryModel { get; set; }

    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        if (!IsEditMode)
        {
            PaymentCategoryModel = new();
            _isLoading = false;
            return;
        }

        var response = await PaymentCategoryClient.GetPaymentCategoryById(Id);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            PaymentCategoryModel = response.Content;
        }
        _isLoading = false;
    }

    private async Task ValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(PaymentCategoryModel);
    }
}